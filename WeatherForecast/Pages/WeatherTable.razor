@page "/Weathertable"
@inject HttpClient Http
@using WeatherForecast.Models

<PageTitle>Weather forecast 7 days</PageTitle>

<h1>Weather forecast Oslo 7 days</h1>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>Time zone @forecasts.timezone</p>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Hour</th>
                <th>Rain</th>
                <th>Windspeed</th>
                <th>Wind Direction</th>
                <th>Temperature</th>
                <th>Weather Description</th>
                <th>Image</th>

            </tr>
        </thead>
        <tbody>

            @for (var i = 0; i < forecasts.hourly.time.Count(); i++)
            {
                <tr>

                    <td><ShowDateOrHour DateAsString="@forecasts.hourly.time[i]" /></td>
                   <!--ShowDateOrHour funksjonen viser med hjelp av forecasts.hourly.time en tid basert på om den er true eller ikke
                       Hvis den er true viser den ikke Dato hvis den ikke er true viser den ikke klokkeslettet-->
                    <td><ShowDateOrHour DateAsString="@forecasts.hourly.time[i]" ShowHourOnly=true /></td>

                    <!--Viser timebaserte verdier fra APIet-->
                    <td>@forecasts.hourly.rain[i] mm</td>

                    <td>@forecasts.hourly.windspeed_10m[i] m/s</td>

                    <!--Sender inn vindretning vedien til WindArrow som roterer en SVG av vindpilen fra Yr på nettsiden-->
                    <td><WindArrow WindDirection="@forecasts.hourly.winddirection_10m[i]" /></td>


                    <td>@forecasts.hourly.temperature_2m[i] C°</td>


                    <!--Sender inn weathercode verdien som blir sjekket i "WeatherCodes.cs" og blir returnert beskrivelsen eller bildetsom samsvarer weathercoden-->
                    <td>
                        @WeatherCodes.GetWeatherDescription(forecasts.hourly.weathercode[i])
                    </td>

                    <td>

                        @{
                            var bilde = WeatherCodes.GetWeatherImage(forecasts.hourly.weathercode[i]);

                            if (bilde != "")
                            {
                                <img src="/Images/svg/@bilde" />
                            }
                        }
                    </td>


                </tr>
            }

        </tbody>
    </table>
    <a href="https://open-meteo.com/">Weather data by Open-Meteo.com</a>
    <br />
    <a href="https://github.com/open-meteo/open-meteo/blob/main/LICENSE">License</a>

}

@code {
    private WeatherForecastHourly? forecasts;

    // Method invoked when the component is ready to start, having received its initial parameters from its parent in the render tree.
    // Override this method if you will perform an asynchronous operation and want the component to refresh when that operation is completed.
    protected override async Task OnInitializedAsync()
    {
        // Henter data fra APIet
        forecasts = await Http.GetFromJsonAsync<WeatherForecastHourly>("?latitude=59.9138&longitude=10.7387&hourly=temperature_2m,relativehumidity_2m,rain,windspeed_10m,winddirection_10m,weathercode&current_weather=true&timezone=Europe%2FBerlin");
    }
}
